# docker-compose up -d --build
version: '3.8'

services:

  # Use minio and nginx if use local S3 - minio
  minio:
    container_name: wpp_minio
    hostname: minio
    image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z
    command: server --address ":5441" --console-address ":5442" /data/
    expose:
      - "5441"
      - "5442"
    networks:
      - s3
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:5441/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./Docker/minio/:/data

  nginx:
    image: nginx:1.19.2-alpine
    container_name: wpp_nginx
    hostname: nginx
    volumes:
      - ./Docker/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "5441:5441"
      - "5442:5442"
    networks:
      - s3
    depends_on:
      - minio

  db_mlflow:
    container_name: wpp_mlflow_postgres
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres_mlflow:/data/postgres
    ports:
      - "5438:5432"
    networks:
      postgres_mlflow:
        ipv4_address: 172.20.128.4  # use it to connect to db in pgadmin

  db_app:
    build: ./Docker/postgres/
    image: wpp_app_postgres
    container_name: wpp_app_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER_APP}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_APP}
      POSTGRES_DB: ${POSTGRES_DB_APP}
      PGDATA: /data/postgres
    volumes:
      - postgres_app:/data/postgres
    ports:
      - "5444:5432"
    networks:
      postgres_app:
        ipv4_address: 172.20.128.20 # use it to connect to db in pgadmin

  pgadmin:
    # [depriocated] to connect to postgres use ip from: `docker ps`, `docker inspect {POSTGRES_CONTAINER ID}` -> IPAddress
    container_name: wpp_pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./Docker/pgadmin/:/var/lib/pgadmin
    ports:
      - "5439:80"
    networks:
      postgres_mlflow:
        ipv4_address: 172.20.128.2
      postgres_app:
        ipv4_address: 172.20.128.18

  mlflow:
    build: ./Docker/mlflow/
    restart: always
    image: wpp_mlflow_server
    container_name: wpp_mlflow_server
    ports:
      - "5440:5000"
    networks:
      postgres_mlflow:
        ipv4_address: 172.20.128.3
      s3:
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # localhost is not working because it is going to use internal network 
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL} # With minio - http://nginx:5441, with yandex - 
    command: >
      mlflow server 
        --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_mlflow/${POSTGRES_DB}
        --default-artifact-root ${AWS_S3_BUCKET}
        --host 0.0.0.0

  app:
    # before create image by `docker build -f Docker/model_service/Dockerfile -t wpp_model_service .`
    container_name: wpp_model_service
    image: wpp_model_service
    ports:
      # check port in cmd by `netstat -a -n -o | find "5443"`
      - "5443:80"
    networks:
      postgres_app:
        ipv4_address: 172.20.128.19
      s3:
    environment:
      # localhost is not working because it is going to use internal network 
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_S3_ENDPOINT_URL=http://storage.yandexcloud.net # With minio - http://nginx:5441, with yandex - 
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

networks:
  postgres_mlflow:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.128.0/28
  s3:
    driver: bridge
  postgres_app:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.128.16/28

volumes:
  postgres_mlflow:
  postgres_app:
